link -- https://leetcode.com/problems/subsets-ii/
code --

#include<bits/stdc++.h>
void solve(vector<int>& arr,int n,set<vector<int>> &st,int index,vector<int> output){
    
if(index==n){
    sort(output.begin(),output.end());
    st.insert(output);
    return;
}
    //exclude
   solve(arr,n,st,index+1,output);
    //include
   output.push_back(arr[index]);
   solve(arr,n,st,index+1,output);
    
}

vector<vector<int>> uniqueSubsets(int n, vector<int> &arr)
{
   set<vector<int>> st;
    vector<vector<int>> ans;
    int index=0;
    vector<int> output;
    solve(arr,n,st,index,output);
    for(it:st)
        ans.push_back(it);
    return ans;
    
      
}
code 2-- 
 
 class Solution {
public:
    
    void solve(vector<int>& nums,vector<int>& output,int index,vector<vector<int>>& ans){
       ans.push_back(output);
        for(int i=index;i<nums.size();i++){
            if(i!=index && nums[i]==nums[i-1]) continue;
            output.push_back(nums[i]);
            solve(nums,output,i+1,ans);
            output.pop_back();
            
        }
       
        
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        
        vector<vector<int>> ans;
        vector<int> output;
        //int index=0;
        sort(nums.begin(),nums.end());
        solve(nums,output,0,ans);
        return ans;
        
    }
};
